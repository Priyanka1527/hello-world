/**
 * 
 */

/**
 * Time complexity depends on the tree with less number of nodes. 
 * If no. of nodes in Tree 1 is m and that of Tree 2 is n then time complexity is
 * O(m) when m < n
 */
public class Binarytree 
{
	Node root1, root2;
	
	boolean isEqual(Node a, Node b)
	{
		if(a == null && b== null)
			return true;
		if(a != null && b != null)
			return(a.data==b.data && isEqual(a.left, b.left)) && isEqual(a.right, b.right);
		
		return false;
	}
	public static void main(String[] args) 
	{
		Binarytree tree = new Binarytree();
		tree.root1 = new Node(1);
		tree.root1.left = new Node(2);
		tree.root1.right = new Node(3);
		tree.root1.left.left = new Node(10);
		tree.root1.left.right = new Node(5);
		
		tree.root2 = new Node(1);
		tree.root2.left = new Node(2);
		tree.root2.right = new Node(3);
		tree.root2.left.left = new Node(4);
		tree.root2.left.right = new Node(5);
		
		if(tree.isEqual(tree.root1, tree.root2))
			System.out.println("The Two Binary Trees are Equal");
		else
			System.out.println("The Two Binary Tress are NOT Equal");
	}

}

class Node
{
	int data;
	Node left, right;
	
	Node(int d)
	{
		data = d;
		left = right = null;
	}
}
